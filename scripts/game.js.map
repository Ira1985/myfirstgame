{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/objects/Donats.js",
    "src/objects/Score.js",
    "src/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import GameState from 'states/GameState';\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tsuper(480, 380, Phaser.CANVAS, null, null);\r\n\t\tthis.state.add('GameState', GameState, false);\r\n\t\tthis.state.start('GameState');\r\n        this.donats;\r\n        this.newDonat;\r\n        this.donatInfo;\r\n        this.timer;\r\n        this.scoreText;\r\n        this.score = 0;\r\n\t}\r\n\r\n}\r\n\r\nnew Game();\r\n",
    "class Donats extends Phaser.Sprite {\r\n  constructor (game)\r\n  {\r\n      super(game, 0, 0);\r\n      game.donatInfo = {\r\n        width: 20,\r\n        height: 20,\r\n        count: {\r\n            row: 11,\r\n            col: 13\r\n        },\r\n        offset: {\r\n            top: 10,\r\n            left: 60\r\n        },\r\n        padding: 10\r\n    }\r\n    game.donats = game.add.group();\r\n    for(let i = 0; i < game.donatInfo.count.col; i++) {\r\n        for(let j = 0; j < game.donatInfo.count.row; j++) {\r\n            let donatX = (i*(game.donatInfo.width+game.donatInfo.padding))+game.donatInfo.offset.left;\r\n            let donatY = (j*(game.donatInfo.height+game.donatInfo.padding))+game.donatInfo.offset.top;\r\n            game.newDonat = game.add.sprite(donatX, donatY, 'gem' + game.rnd.integerInRange(1, 7));\r\n            game.newDonat.scale.setTo(0.3,0.3);\r\n            game.physics.enable(game.newDonat, Phaser.Physics.ARCADE);\r\n            game.newDonat.body.collideWorldBounds = true;\r\n            game.newDonat.body.gravity.y = 1000;\r\n            game.newDonat.body.immovable = false;\r\n            game.newDonat.inputEnabled = true;\r\n            game.newDonat.input.enableDrag();\r\n            game.donats.add(game.newDonat);\r\n        }\r\n    }\r\n  }\r\n    moveLeftAndCheckMatch(item, game, index, startPointX, startPointY) {\r\n        let key1 = item.key;\r\n        let key2 = game.donats.children[index - 11].key;\r\n        game.donats.children[index - 11].loadTexture(key1);\r\n        item.loadTexture(key2);\r\n        item.input.draggable = false;\r\n        item.x = startPointX;\r\n        let objOfMatches = {};\r\n        let idOfMatches = [];\r\n        for(let i = 0; i < 6; i++) {\r\n            idOfMatches = [];\r\n            for(let j = 0; j < 12; j++) {\r\n                if(i == 0){\r\n                    if(game.donats.children[index - 11].key == game.donats.children[index - 11 - 11*j].key) {\r\n                        idOfMatches.push(index - 11 - 11*j);\r\n                        objOfMatches[game.donats.children[index - 11].key + \" 0\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 1) {\r\n                    if(game.donats.children[index].key == game.donats.children[index + 11*j].key) {\r\n                        idOfMatches.push(index + 11*j);\r\n                        objOfMatches[game.donats.children[index].key  + \" 1\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 2) {\r\n                    if(game.donats.children[index - 11].key == game.donats.children[index - 11 - j].key) {\r\n                        idOfMatches.push(index - 11 - j);\r\n                        objOfMatches[game.donats.children[index - 11].key + \" 2\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 3){\r\n                    if(game.donats.children[index - 11].key == game.donats.children[index - 11 + j].key) {\r\n                        idOfMatches.push(index - 11 + j);\r\n                        objOfMatches[game.donats.children[index - 11].key + \" 3\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 4) {\r\n                    if(game.donats.children[index].key == game.donats.children[index - j].key) {\r\n                        idOfMatches.push(index - j);\r\n                        objOfMatches[game.donats.children[index].key + \" 4\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 5) {\r\n                    if(game.donats.children[index].key == game.donats.children[index + j].key) {\r\n                        idOfMatches.push(index + j);\r\n                        objOfMatches[game.donats.children[index].key + \" 5\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n            }\r\n        }\r\n        let arrOfDelete = Object.values(objOfMatches);\r\n        this.deleteDonats(arrOfDelete, game);\r\n    }\r\n    moveRightAndCheckMatch(item, game, index, startPointX, startPointY) {\r\n        let key1 = item.key;\r\n        let key2 = game.donats.children[index + 11].key;\r\n        game.donats.children[index + 11].loadTexture(key1);\r\n        item.loadTexture(key2);\r\n        item.input.draggable = false;\r\n        item.x = startPointX;\r\n        let objOfMatches = {};\r\n        let idOfMatches = [];\r\n        for(let i = 0; i < 6; i++) {\r\n            idOfMatches = [];\r\n            for(let j = 0; j < 12; j++) {\r\n                if(i == 0){\r\n                    if(game.donats.children[index].key == game.donats.children[index - 11*j].key) {\r\n                        idOfMatches.push(index - 11*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 0\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 1) {\r\n                    if(game.donats.children[index + 11].key == game.donats.children[index + 11 + 11*j].key) {\r\n                        idOfMatches.push(index + 11 + 11*j);\r\n                        objOfMatches[game.donats.children[index + 11].key  + \" 1\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 2) {\r\n                    if(game.donats.children[index + 11].key == game.donats.children[index + 11 - j].key) {\r\n                        idOfMatches.push(index + 11 - j);\r\n                        objOfMatches[game.donats.children[index + 11].key + \" 2\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 3){\r\n                    if(game.donats.children[index + 11].key == game.donats.children[index + 11 + j].key) {\r\n                        idOfMatches.push(index + 11 + j);\r\n                        objOfMatches[game.donats.children[index + 11].key + \" 3\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 4) {\r\n                    if(game.donats.children[index].key == game.donats.children[index - j].key) {\r\n                        idOfMatches.push(index - j);\r\n                        objOfMatches[game.donats.children[index].key + \" 4\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 5) {\r\n                    if(game.donats.children[index].key == game.donats.children[index + j].key) {\r\n                        idOfMatches.push(index + j);\r\n                        objOfMatches[game.donats.children[index].key + \" 5\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n            }\r\n        }\r\n        let arrOfDelete = Object.values(objOfMatches);\r\n        this.deleteDonats(arrOfDelete, game);\r\n    }\r\n    moveUpAndCheckMatch(item, game, index, startPointX, startPointY) {\r\n        let key1 = item.key;\r\n        let key2 = game.donats.children[index - 1].key;\r\n        game.donats.children[index - 1].loadTexture(key1);\r\n        item.loadTexture(key2);\r\n        item.input.draggable = false;\r\n        item.y = startPointY;\r\n        let objOfMatches = {};\r\n        let idOfMatches = [];\r\n        for(let i = 0; i < 6; i++) {\r\n            idOfMatches = [];\r\n            for(let j = 0; j < 12; j++) {\r\n                if(i == 0){\r\n                    if(game.donats.children[index].key == game.donats.children[index + 1*j].key) {\r\n                        idOfMatches.push(index + 1*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 0\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 1) {\r\n                    if(game.donats.children[index - 1].key == game.donats.children[index - 1 - 1*j].key) {\r\n                        idOfMatches.push(index - 1 - 1*j);\r\n                        objOfMatches[game.donats.children[index - 1].key  + \" 1\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 2) {\r\n                    if(game.donats.children[index - 1].key == game.donats.children[index - 1 - 11*j].key) {\r\n                        idOfMatches.push(index - 1 - 11*j);\r\n                        objOfMatches[game.donats.children[index - 1].key + \" 2\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 3){\r\n                    if(game.donats.children[index - 1].key == game.donats.children[index - 1 + 11*j].key) {\r\n                        idOfMatches.push(index - 1 + 11*j);\r\n                        objOfMatches[game.donats.children[index - 1].key + \" 3\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 4) {\r\n                    if(game.donats.children[index].key == game.donats.children[index - 11*j].key) {\r\n                        idOfMatches.push(index - 11*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 4\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 5) {\r\n                    if(game.donats.children[index].key == game.donats.children[index + 11*j].key) {\r\n                        idOfMatches.push(index + 11*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 5\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n            }\r\n        }\r\n        let arrOfDelete = Object.values(objOfMatches);\r\n        arrOfDelete.forEach(item => console.log(item));\r\n        this.deleteDonats(arrOfDelete, game);\r\n    }\r\n    moveDownAndCheckMatch(item, game, index, startPointX, startPointY) {\r\n        let key1 = item.key;\r\n        let key2 = game.donats.children[index + 1].key;\r\n        game.donats.children[index + 1].loadTexture(key1);\r\n        item.loadTexture(key2);\r\n        item.input.draggable = false;\r\n        item.y = startPointY;\r\n        let objOfMatches = {};\r\n        let idOfMatches = [];\r\n        for(let i = 0; i < 6; i++) {\r\n            idOfMatches = [];\r\n            for(let j = 0; j < 12; j++) {\r\n                if(i == 0){\r\n                    if(game.donats.children[index].key == game.donats.children[index - 1*j].key) {\r\n                        idOfMatches.push(index - 1*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 0\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 1) {\r\n                    if(game.donats.children[index + 1].key == game.donats.children[index + 1 + 1*j].key) {\r\n                        idOfMatches.push(index + 1 + 1*j);\r\n                        objOfMatches[game.donats.children[index + 1].key  + \" 1\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 2) {\r\n                    if(game.donats.children[index + 1].key == game.donats.children[index + 1 - 11*j].key) {\r\n                        idOfMatches.push(index + 1 - 11*j);\r\n                        objOfMatches[game.donats.children[index + 1].key + \" 2\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 3){\r\n                    if(game.donats.children[index + 1].key == game.donats.children[index + 1 + 11*j].key) {\r\n                        idOfMatches.push(index + 1 + 11*j);\r\n                        objOfMatches[game.donats.children[index + 1].key + \" 3\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 4) {\r\n                    if(game.donats.children[index].key == game.donats.children[index - 11*j].key) {\r\n                        idOfMatches.push(index - 11*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 4\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n                if(i == 5) {\r\n                    if(game.donats.children[index].key == game.donats.children[index + 11*j].key) {\r\n                        idOfMatches.push(index + 11*j);\r\n                        objOfMatches[game.donats.children[index].key + \" 5\"] = idOfMatches;\r\n                    } else break;\r\n                }\r\n            }\r\n        }\r\n        let arrOfDelete = Object.values(objOfMatches);\r\n        arrOfDelete.forEach(item => console.log(item));\r\n        this.deleteDonats(arrOfDelete, game);\r\n    }\r\n    deleteDonats(arrOfDelete, game) {\r\n        arrOfDelete.forEach(item => {\r\n            if(item.length >= 3) {\r\n                item.forEach(elem => {\r\n                    let row = Math.ceil(elem/11);\r\n                    let minRow = row * 11 - 11;\r\n                    for(let i = elem; i > minRow; i--) {\r\n                        game.donats.children[i].loadTexture(game.donats.children[i - 1].key);\r\n                    }\r\n                    game.donats.children[minRow].loadTexture('gem' + game.rnd.integerInRange(1, 7));\r\n                    game.score += 10;\r\n                    game.scoreText.setText('Points: ' + game.score);\r\n                    this.gameOver(game.score);\r\n                })\r\n            }\r\n        })\r\n    }\r\n    gameOver(score) {\r\n        if(score > 100) {\r\n            alert('Game over');\r\n            location.reload();\r\n        }\r\n    }\r\n\r\n  \r\n}\r\n\r\nexport default Donats;",
    "class Score extends Phaser.Text {\r\n\r\n\tconstructor(game, x, y, text) {\r\n\r\n\t\tsuper(game, x, y, text, { font: \"18px Fredoka One\", fill: \"#0095DD\" });\r\n\r\n\t\tthis.game.stage.addChild(this);\r\n\r\n\t}\r\n\t\r\n\r\n    updateScore() {\r\n        game.score += 10;\r\n        console.log(this.game);\r\n    }\r\n\r\n}\r\n\r\nexport default Score;",
    "import Score from 'objects/Score';\r\nimport Donats from 'objects/Donats';\r\n\r\nclass GameState extends Phaser.State {\r\n    preload() {\r\n        const img = 'img/';\r\n        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n        this.scale.pageAlignHorizontally = true;\r\n        this.scale.pageAlignVertically = true;\r\n        this.stage.backgroundColor = \"#eee\";\r\n        this.load.image('gem1', img+'gem-01.png');\r\n        this.load.image('gem2', img+'gem-02.png');\r\n        this.load.image('gem3', img+'gem-03.png');\r\n        this.load.image('gem4', img+'gem-04.png');\r\n        this.load.image('gem5', img+'gem-05.png');\r\n        this.load.image('gem6', img+'gem-06.png');\r\n        this.load.image('gem7', img+'gem-07.png');\r\n        this.load.image('background', img+'background.jpg');\r\n        \r\n    }\r\n\r\n\tcreate() {\r\n        this.physics.startSystem(Phaser.Physics.ARCADE);\r\n        let back = this.add.sprite(62.5, 50, \"background\");\r\n        back.scale.setTo(0.3,0.345);\r\n        this.score = 0;\r\n\t\tthis.scoreText = new Score(this.game, 340, 10, \"Points: \" + this.game.score);\r\n        this.timeInSeconds = 120;\r\n        this.timeText = this.game.add.text(60, 30, \"0:00\",{font: '18px Fredoka One', fill: '#0095DD'});\r\n        this.timeText.anchor.set(0.5, 0.5);\r\n        \r\n        let donats = this.add.existing( new Donats(this) );\r\n        this.donats.children.forEach((item, index) => {\r\n            let startPointX = 0;\r\n            let startPointY = 0;\r\n            item.events.onInputDown.add(() => {\r\n                item.input.draggable = true;\r\n            });\r\n            item.events.onDragStart.add(() => {\r\n                startPointX = item.x;\r\n                startPointY = item.y;\r\n            }, this);\r\n            item.events.onDragUpdate.add(() => {\r\n                let differenceX = startPointX - item.x;\r\n                let differenceY = startPointY - item.y;\r\n            \r\n                if(differenceX > 10 && differenceY < 2 && differenceY > -2) {\r\n                    donats.moveLeftAndCheckMatch(item, this, index, startPointX, startPointY);\r\n                } else if(differenceX < -10 && differenceY < 2 && differenceY > -2) {\r\n                    donats.moveRightAndCheckMatch(item, this, index, startPointX, startPointY);\r\n                } else if(differenceY > 10 && differenceX < 2 && differenceX > -2) {\r\n                    donats.moveUpAndCheckMatch(item, this, index, startPointX, startPointY);\r\n                } else if(differenceY < -10 && differenceX < 2 && differenceX > -2) {\r\n                    donats.moveDownAndCheckMatch(item, this, index, startPointX, startPointY);\r\n                }\r\n            });\r\n        })\r\n\t}\r\n    update() {\r\n        this.physics.arcade.collide(this.donats, this.donats, function br(donat1, donat2) {\r\n            donat1.body.allowGravity = false;\r\n            donat2.body.allowGravity = false;\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default GameState;"
  ]
}